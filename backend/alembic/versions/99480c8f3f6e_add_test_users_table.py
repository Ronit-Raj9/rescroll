"""Add test_users table

Revision ID: 99480c8f3f6e
Revises: 75ad21555502
Create Date: 2025-03-13 12:09:09.705477

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '99480c8f3f6e'
down_revision: Union[str, None] = '75ad21555502'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('test_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_users_email'), 'test_users', ['email'], unique=True)
    op.create_index(op.f('ix_test_users_full_name'), 'test_users', ['full_name'], unique=False)
    op.create_index(op.f('ix_test_users_id'), 'test_users', ['id'], unique=False)
    op.create_index(op.f('ix_test_users_username'), 'test_users', ['username'], unique=True)
    op.create_table('reading_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('read_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_spent', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reading_history_id'), 'reading_history', ['id'], unique=False)
    op.drop_index('ix_reading_histories_id', table_name='reading_histories')
    op.drop_index('ix_reading_histories_paper_id', table_name='reading_histories')
    op.drop_table('reading_histories')
    op.add_column('quiz_results', sa.Column('article_id', sa.String(), nullable=False))
    op.add_column('quiz_results', sa.Column('answers', sa.JSON(), nullable=True))
    op.alter_column('quiz_results', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.drop_index('ix_quiz_results_paper_id', table_name='quiz_results')
    op.drop_column('quiz_results', 'updated_at')
    op.drop_column('quiz_results', 'correct_answers')
    op.drop_column('quiz_results', 'completed_at')
    op.drop_column('quiz_results', 'paper_id')
    op.drop_column('quiz_results', 'time_taken')
    op.drop_column('quiz_results', 'total_questions')
    op.drop_column('quiz_results', 'quiz_data')
    op.alter_column('topics', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint('topics_parent_id_fkey', 'topics', type_='foreignkey')
    op.drop_column('topics', 'updated_at')
    op.drop_column('topics', 'created_at')
    op.drop_column('topics', 'parent_id')
    op.add_column('user_preferences', sa.Column('reading_preferences', sa.JSON(), nullable=True))
    op.drop_column('user_preferences', 'updated_at')
    op.drop_column('user_preferences', 'created_at')
    op.create_index(op.f('ix_users_full_name'), 'users', ['full_name'], unique=False)
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('bio', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_full_name'), table_name='users')
    op.add_column('user_preferences', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('user_preferences', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('user_preferences', 'reading_preferences')
    op.add_column('topics', sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('topics', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('topics', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.create_foreign_key('topics_parent_id_fkey', 'topics', 'topics', ['parent_id'], ['id'])
    op.alter_column('topics', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.add_column('quiz_results', sa.Column('quiz_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('quiz_results', sa.Column('total_questions', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('quiz_results', sa.Column('time_taken', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('quiz_results', sa.Column('paper_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('quiz_results', sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('quiz_results', sa.Column('correct_answers', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('quiz_results', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.create_index('ix_quiz_results_paper_id', 'quiz_results', ['paper_id'], unique=False)
    op.alter_column('quiz_results', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('quiz_results', 'answers')
    op.drop_column('quiz_results', 'article_id')
    op.create_table('reading_histories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('paper_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('authors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('abstract', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('read_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('read_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completion_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='reading_histories_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reading_histories_pkey')
    )
    op.create_index('ix_reading_histories_paper_id', 'reading_histories', ['paper_id'], unique=False)
    op.create_index('ix_reading_histories_id', 'reading_histories', ['id'], unique=False)
    op.drop_index(op.f('ix_reading_history_id'), table_name='reading_history')
    op.drop_table('reading_history')
    op.drop_index(op.f('ix_test_users_username'), table_name='test_users')
    op.drop_index(op.f('ix_test_users_id'), table_name='test_users')
    op.drop_index(op.f('ix_test_users_full_name'), table_name='test_users')
    op.drop_index(op.f('ix_test_users_email'), table_name='test_users')
    op.drop_table('test_users')
    # ### end Alembic commands ###
